/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)
    {
        ListNode* l3=new ListNode();
        ListNode* ptr=l3;
        while(l1||l2)
        {
            if(l1&&l2)
            {
                    if( (l1->val)==(l2->val) )
                    {
                        ListNode* l4=new ListNode(l1->val);
                        ptr->next=l4;
                        ptr=ptr->next;
                         l4=new ListNode(l2->val);
                        ptr->next=l4;
                        ptr=ptr->next;
                        l1=l1->next;
                        l2=l2->next;
                    }
                    else if( (l1->val)<(l2->val) )
                    {
                        ListNode* l4=new ListNode(l1->val);
                        ptr->next=l4;
                        ptr=ptr->next;
                        l1=l1->next;
                    }
                    else
                    {
                        ListNode* l4=new ListNode(l2->val);
                        ptr->next=l4;
                        ptr=ptr->next;
                        l2=l2->next;
                    }
            }
            else if(l1)
            {
                 while(l1)
                 {
                    ListNode* l4=new ListNode(l1->val);
                            ptr->next=l4;
                            ptr=ptr->next;
                            l1=l1->next;
                 }
                break;
            }
            else
            {
                while(l2)
                 {
                    ListNode* l4=new ListNode(l2->val);
                            ptr->next=l4;
                            ptr=ptr->next;
                            l2=l2->next;
                 }
                break;
            }
        }
        return l3->next;
    }
};
