# Method 1: 

class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int n=letters.size();
        int i;
        for(i=0;i<n;i++)
        {
            if(letters[i]>target)
                return letters[i];
        }
        for(i=0;i<n;i++)
        {
            if(letters[i]!=target)
                return letters[i];
        }
        return 'a';
    }
};


# Method 2: Some efficient method than method 1.


class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int s=0;
        int e = letters.size()-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(letters[mid]>target) e = mid-1; 
//if mid is greater than the target, search on the left side for a value smaller than mid but still greater than the target.
            
            else    s = mid+1;                            
//if mid is smaller, as this is sorted array, value greater than target would be on the right side of array.
        }
        
        return letters[s%letters.size()];   
//if character goes out of array modulo it with size of array to keep it in array range.
        
    }
};


